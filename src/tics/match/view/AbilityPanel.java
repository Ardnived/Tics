package tics.match.view;

import javax.swing.BorderFactory;
import javax.swing.JPanel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.UIManager;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionListener;
import java.awt.Font;

import javax.swing.SwingConstants;

import tics.match.model.Ability;

import java.awt.Component;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.Insets;

/**
 * A JPanel that contains the button for activating an ability, as well as the ability's description.
 * 
 * @author Michael D'Andrea
 * @author Devindra Payment
 */
@SuppressWarnings("serial") //There's no need to serialise interface elements.
public class AbilityPanel extends JPanel {
	/** The action command that will identify a button press from this class as that of an ability button. */
	public static final String ABILITY_BUTTON_COMMAND = "Ability";
	
	/**
	 * Generates a panel for the given ability.
	 * This code is mostly generated by WindowBuilder.
	 * 
	 * @param ability the ability to display on this panel.
	 * @param actionListener the current game, which needs to know when this button is pressed.
	 * @param buttonEnabled true if the button for this panel's ability can be pressed.
	 */
	public AbilityPanel(Ability ability, ActionListener actionListener, boolean buttonEnabled) {
		setAlignmentY(Component.TOP_ALIGNMENT);
		setAlignmentX(Component.LEFT_ALIGNMENT);
		super.setBorder(BorderFactory.createMatteBorder(1, 0, 0, 0, Color.GRAY));
		GridBagLayout gridBagLayout = new GridBagLayout();
		gridBagLayout.columnWidths = new int[]{36, 182, 0}; //The second column's width is very specific.
		//The default size for these panels changes even within a single set of them, 
		//so a minimum width is necessary to keep them identical.
		gridBagLayout.rowHeights = new int[]{36, 104, 0};
		gridBagLayout.columnWeights = new double[]{0.0, 1.0, Double.MIN_VALUE};
		gridBagLayout.rowWeights = new double[]{0.0, 0.0, Double.MIN_VALUE};
		setLayout(gridBagLayout);
		
		JButton nameButton = new JButton("Name");
		nameButton.setText(ability.toString());
		nameButton.setActionCommand(ABILITY_BUTTON_COMMAND);
		nameButton.addActionListener(actionListener);
		
		JLabel iconLabel = new JLabel("");
		//EXTRA: Display an ability icon here, maybe with a nice border.
		//TODO: If releasing without an icon setup, remove the icon label and move the button back to the left.
		GridBagConstraints gbc_iconLabel = new GridBagConstraints();
		gbc_iconLabel.fill = GridBagConstraints.BOTH;
		gbc_iconLabel.insets = new Insets(5, 0, 5, 5);
		gbc_iconLabel.gridx = 0;
		gbc_iconLabel.gridy = 0;
		add(iconLabel, gbc_iconLabel);
		nameButton.setEnabled(buttonEnabled);
		GridBagConstraints gbc_nameButton = new GridBagConstraints();
		gbc_nameButton.fill = GridBagConstraints.BOTH;
		gbc_nameButton.insets = new Insets(5, 0, 5, 5);
		gbc_nameButton.gridx = 1;
		gbc_nameButton.gridy = 0;
		add(nameButton, gbc_nameButton);
		
		setMaximumSize(new Dimension(219, 150)); //Don't overexpand the ability panels.
		
		JLabel descriptionLabel = new JLabel();
		descriptionLabel.setHorizontalAlignment(SwingConstants.LEFT);
		descriptionLabel.setVerticalAlignment(SwingConstants.TOP);
		descriptionLabel.setFont(new Font("Tahoma", Font.PLAIN, 12));
		GridBagConstraints gbc_descriptionLabel = new GridBagConstraints();
		gbc_descriptionLabel.insets = new Insets(0, 5, 5, 5);
		gbc_descriptionLabel.fill = GridBagConstraints.BOTH;
		gbc_descriptionLabel.gridwidth = 2;
		gbc_descriptionLabel.gridx = 0;
		gbc_descriptionLabel.gridy = 1;
		add(descriptionLabel, gbc_descriptionLabel);
		
		descriptionLabel.setBackground(UIManager.getColor("Button.background"));
		
		descriptionLabel.setText("<HTML>" + ability.getDescription() + "</HTML>");
	}
}
